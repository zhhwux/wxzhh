# sound，包含一个列表，每个元素为一个音频文件的文件名
sound: 
  - 哒1.mp3
  - 字母A.mp3       
  - 字母B.mp3       
  - 字母C.mp3       
  - 字母D.mp3 
  - 字母E.mp3 
  - 字母F.mp3 
  - 字母G.mp3 
  - 字母H.mp3 
  - 字母I.mp3 
  - 字母J.mp3 
  - 字母K.mp3 
  - 字母L.mp3 
  - 字母M.mp3 
  - 字母N.mp3
  - 字母O.mp3 
  - 字母P.mp3 
  - 字母Q.mp3 
  - 字母R.mp3 
  - 字母S.mp3 
  - 字母T.mp3 
  - 字母U.mp3 
  - 字母V.mp3 
  - 字母W.mp3 
  - 字母X.mp3 
  - 字母Y.mp3 
  - 字母Z.mp3 
  
folder: 字母

keyset: 


   - {keys: [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z], inOrder: true, sounds: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26] }
   #- {min: KEYCODE_SPACE, max: KEYCODE_SPACE, inOrder: false, sounds: [0] }  #列表内只能填数字sounds: [3]，不能填文件名sounds: [Back.m4a]


# 当同时有min/max、keys三个参数时，keys有效，min和max无效。这三个参数的值为Android KeyName，可以参考下文。特别的，KeyName在书写时允许忽略KEYCODE_
# sounds: [6]是音效列表。当列表为数字时，指对应的音效在sound中出现的顺序（从0开始计数）；当列表为其他字符时，指代文件名。但是，只有出现在sound中的文件名才是有效的。当使用无效的音效时，会播放音效0。
# inOrder即按键和音效乱序对应，还是顺序对应。特别的，无论乱序还是顺序，一直重复按同一个按键，都只能发同一个声音。
# 举例：当指定按键a b c d和音效1 2 3时，如使用乱序模式，按a可能触发1 2 3中任意一个音效。如选择顺序模式，按照a1 b2 c3 d1顺序对应。



# melody: [3, 3, 3, 0, 3, 3, 3, 0,  3, 5, 1, 2, 3 , 0, 4, 4, 4, 0 , 4, 3,  3 ,  0, 3, 3,  2,  3, 2, 5, 0]
# melody，包含一个列表。当存在melody时，keyset无效。melody类似midi音乐的效果，当音效包内包含1 2 3 4 5 6 7不同音阶的音效，并且包含melody: [0, 0, 5, 5, 6]，只要持续按按键，无论按任何按键，都会持续循环播放音阶1 1 6 6 7，但是由于按键速度不稳定，音乐速度也会非常不稳定，所以并不适合复杂的音乐。当键盘收起并重新弹出时，演奏进度自动复位。